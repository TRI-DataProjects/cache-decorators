[tool]
[tool.poetry]
name = "cache_decorators"
packages = [{ include = "cache_decorators" }]
version = "0.1.0"
description = ""
authors = ["John Merkel <merkelj@wou.edu>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
ibis-framework = { version = ">=6.0.0", extras = ["duckdb"] }
pandas = { version = ">=2.0.0, <2.1.0", extras = ["excel"] }
filelock = ">=3.12.0"


[tool.poetry.group]
[tool.poetry.group.dev.dependencies]
black = "^23.0.0"
ruff = ">=0.0.288"
poethepoet = "^0.22.0"
ipykernel = "^6.25.1"

[tool.poetry.group.test.dependencies]
pytest = "^7.0.0"
pytest-cov = "^4.0.0"


[tool.coverage]
[tool.coverage.run]
source = ["cache_decorators"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if __name__ == .__main__.:",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.poe.tasks]
[tool.poe.tasks._run_cov]
cmd = "coverage run -m pytest tests"
[tool.poe.tasks._cov_html]
cmd = "coverage html -d coverage/cov_html"
[tool.poe.tasks._cov_xml]
cmd = "coverage xml -o coverage/cov.xml"
[tool.poe.tasks._cov_report]
cmd = "coverage report"
[tool.poe.tasks.cov]
sequence = ["_run_cov", "_cov_html", "_cov_xml", "_cov_report"]


[tool.ruff]
line-length = 88
src = ["cache_decorators", "tests"]
select = ["ALL"]
ignore = [
    "ANN101", # Missing type annotation for `self` in method
    "D205",   # 1 blank line required between summary line and description
    "D401",   # First line of docstring should be in imperative mood
    "D203",   # `one-blank-line-before-class` (D203) and `no-blank-line-before-class` (D211) are incompatible
    "D212",   # `multi-line-summary-first-line` (D212) and `multi-line-summary-second-line` (D213) are incompatible
    "S104",   # Possible binding to all interface
]
unfixable = ["B"]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = [
    "S101",    # asserts allowed in tests...
    "FBT",     # don"t care about booleans as positional arguments in tests
    "INP001",  # no implicit namespace
    "D",       # don"t care about documentation in tests
    "S603",    # `subprocess` call: check for execution of untrusted input
    "PLR2004", # Magic value used in comparison, consider replacing with a constant variable
]
"cache_decorators/_factories.py" = [
    "ANN002", # Checks that function `*args` arguments have type annotations.
    "ANN003", # Checks that function `**kwargs` arguments have type annotations.
]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.flake8-quotes]
docstring-quotes = "double"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
